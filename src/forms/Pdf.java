/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package forms;

import entities.GPSTracker;
import entities.Position;
import entities.Vehicule;
import entities.VehiculeGPSTracker;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.pdfbox.debugger.ui.ExtensionFileFilter;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import service.GPSTrackerService;
import service.PositionService;
import service.VehiculeGPSTrackerService;
import service.VehiculeService;

/**
 *
 * @author nyanpasu
 */
public class Pdf extends javax.swing.JInternalFrame {

    PositionService ps;
    VehiculeService vs;
    GPSTrackerService ts;
    VehiculeGPSTrackerService vgs;
    String[] ext = new String[1];
    String title = "PDF";
    PDDocument doc;
    PDPage page;
    PDPageContentStream content;

    /**
     * Creates new form PDF
     */
    public Pdf() {

        ts = new GPSTrackerService();
        vs = new VehiculeService();
        vgs = new VehiculeGPSTrackerService();
        ps = new PositionService();

        ext[0] = "pdf";
        initComponents();
        jFileChooser1.addChoosableFileFilter(new ExtensionFileFilter(ext, title));
        doc = new PDDocument();
        page = new PDPage();
        doc.addPage(page);

    }

    private void write(String text) throws IOException {

        content.showText(text);
        content.newLine();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("rapport PDF");

        jFileChooser1.setAcceptAllFileFilterUsed(false);
        jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        jFileChooser1.setApproveButtonText("exporter");
        jFileChooser1.setDialogTitle("rapport pdf");
        jFileChooser1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        try {
            // TODO add your handling code here;
            String file = jFileChooser1.getSelectedFile().getAbsolutePath() + ".pdf";
            content = new PDPageContentStream(doc, page);
            PDFont font = PDType1Font.HELVETICA;
            content.setFont(font, 12);
            content.beginText();
            content.setLeading(14.5f);
            content.newLineAtOffset(25, 725);

            for (Vehicule v : vs.findAll()) {
                write(v.toString());
            }
            for (GPSTracker g : ts.findAll()) {
                write(g.toString());
            }
            for (VehiculeGPSTracker vg : vgs.findAll()) {
                write(vg.toString());
            }
            for (Position p : ps.findAll()) {
                write(p.toString());
            }
            content.endText();
            content.close();
            doc.save(file);
            doc.close();
        } catch (IOException e) {
            Logger.getLogger(Pdf.class.getName()).log(Level.SEVERE, null, e);
        }


    }//GEN-LAST:event_jFileChooser1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables
}
